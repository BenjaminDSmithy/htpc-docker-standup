
#| -----------------------------
#| | S Y S T E M - D O C K E R |
#| -----------------------------
#|
#| Container based system tools configuration
#|
#|
#| -- DO NOT EDIT THIS FILE --
#|
#| Configuration items for this file are taken from the .env file
#|
#| Have system-docker-compose.yaml and .env in the same directory to launch the stack

version: '3'

######################
# SERVICES TO LAUNCH #
######################

services:

    #--------------------------------------------#
   ## PORTAINER                                  ##
   ##  Docker Container Management               ##
    #--------------------------------------------#
    portainer:
        image: portainer/portainer:${DEFAULT_TAG}
        container_name: portainer
        restart: unless-stopped
        networks:
            - web
        expose:
            - 9000
        environment:
            - TZ=${TZ}
            - PUID=${PUID}
            - PGID=${PGID}
        volumes:
            - '/${ROOT_FOLDER_PATH}/containers/apps/system/portainer:/config'
            - '/var/run/docker.sock:/var/run/docker.sock'
            - '/etc/localtime:/etc/localtime:ro'
        labels:
            - 'traefik.enable=true'
            - 'traefik.docker.network=${STACK_NAME}_web'
            - 'traefik.port=9000'
            - 'traefik.frontend.rule=Host:portainer.${DOMAIN}'
            - 'traefik.frontend.entryPoints=https'
            - 'traefik.frontend.headers.forceSTSHeader=true'
            - 'traefik.frontend.headers.STSSeconds=315360000'
            - 'traefik.frontend.headers.STSIncludeSubdomains=true'
            - 'traefik.frontend.headers.STSPreload=true'




    #--------------------------------------------#
   ## WATCHTOWER                                 ##
   ##  Automatic Update Service for Docker VMs   ##
    #--------------------------------------------#
    watchtower:
        image: v2tec/watchtower:${DEFAULT_TAG}
        container_name: watchtower
        restart: unless-stopped
        networks:
            - internal
        environment:
            - TZ=${TZ}
            - PUID=${PUID}
            - PGID=${PGID}
            - WATCHTOWER_NOTIFICATIONS=email
            - WATCHTOWER_NOTIFICATION_EMAIL_FROM=${SMTP_FROM}
            - WATCHTOWER_NOTIFICATION_EMAIL_TO=${WATCHTOWER_EMAIL}
            - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=${SMTP_SERVER}
            - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=${SMTP_PORT}
            - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=${SMTP_USER}
            - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=${SMTP_PASS}
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock'
            - '/etc/ssl/certs:/etc/ssl/certs'
        command: --schedule @midnight --cleanup
        labels:
            - 'traefik.enable=false'




    #--------------------------------------------#
   ## NETDATA                                    ##
   ##  System Resource Monitoring Service        ##
    #--------------------------------------------#
    netdata:
        image: titpetric/netdata:${DEFAULT_TAG}
        container_name: netdata
        restart: unless-stopped
        networks:
            - web
        expose:
            - 19999
        environment:
            - TZ=${TZ}
            - PUID=${PUID}
            - PGID=${PGID}
        cap_add:
            - SYS_PTRACE
        volumes:
            - '/proc:/host/proc:ro'
            - '/sys:/host/sys:ro'
            - '/etc/localtime:/etc/localtime:ro'
            - '/var/run/docker.sock:/var/run/docker.sock'
            - '/etc/netdata/override:/etc/netdata/override'
        labels:
            - 'traefik.enable=true'
            - 'traefik.docker.network=${STACK_NAME}_web'
            - 'traefik.port=19999'
            - 'traefik.frontend.rule=Host:netdata.${DOMAIN}'
            - 'traefik.frontend.entryPoints=https'
            - 'traefik.frontend.headers.forceSTSHeader=true'
            - 'traefik.frontend.headers.STSSeconds=315360000'
            - 'traefik.frontend.headers.STSIncludeSubdomains=true'
            - 'traefik.frontend.headers.STSPreload=true'




    #--------------------------------------------#
   ## DUPLICATI                                  ##
   ##  Backup Software                           ##
    #--------------------------------------------#
    duplicati:
        image: linuxserver/duplicati:${DEFAULT_TAG}
        container_name: duplicati
        restart: unless-stopped
        networks:
            - web
        expose:
            - 8200
        environment:
            - TZ=${TZ}
            - PUID=${PUID}
            - PGID=${PGID}
        volumes:
            - '/${ROOT_FOLDER_PATH}/containers/apps/system/duplicati:/config'
            - '/${ROOT_FOLDER_PATH}:/${ROOT_FOLDER_PATH}'
            - '/etc/localtime:/etc/localtime:ro'
        labels:
            - 'traefik.enable=true'
            - 'traefik.docker.network=${STACK_NAME}_web'
            - 'traefik.port=8200'
            - 'traefik.frontend.rule=Host:duplicati.${DOMAIN}'
            - 'traefik.frontend.entryPoints=https'
            - 'traefik.frontend.headers.forceSTSHeader=true'
            - 'traefik.frontend.headers.STSSeconds=315360000'
            - 'traefik.frontend.headers.STSIncludeSubdomains=true'
            - 'traefik.frontend.headers.STSPreload=true'




    #--------------------------------------------#
   ## INFLUXDB                                   ##
   ##  Time Series Database                      ##
    #--------------------------------------------#
    influxdb:
        image: influxdb:${DEFAULT_TAG}
        container_name: influxdb
        restart: unless-stopped
        networks:
            - internal
        expose:
            - 8086
        environment:
            - TZ=${TZ}
            - PUID=${PUID}
            - PGID=${PGID}
            - INFLUXDB_DB=speedtest; CREATE DATABASE varken;
        volumes:
            - '/${ROOT_FOLDER_PATH}/containers/apps/system/influxdb:/var/lib/influxdb'
        labels:
            - 'traefik.enable=false'




    #--------------------------------------------#
   ## CHRONOGRAF                                 ##
   ##  Dashboard Tool for Speedtest              ##
    #--------------------------------------------#
    chronograf:
        image: chronograf:${DEFAULT_TAG}
        container_name: chronograf
        restart: unless-stopped
        networks:
            - web
            - internal
        expose:
            - 8888
        environment:
            - TZ=${TZ}
            - PUID=${PUID}
            - PGID=${PGID}
        volumes:
            - '/${ROOT_FOLDER_PATH}/containers/apps/system/chronograf:/var/lib/chronograf'
        command:
            - chronograf
            - --influxdb-url=http://influxdb:8086
        depends_on:
            - influxdb
        labels:
            - 'traefik.enable=true'
            - 'traefik.docker.network=${STACK_NAME}_web'
            - 'traefik.port=8888'
            - 'traefik.frontend.rule=Host:chronograf.${DOMAIN}'
            - 'traefik.frontend.entryPoints=https'
            - 'traefik.frontend.headers.forceSTSHeader=true'
            - 'traefik.frontend.headers.STSSeconds=315360000'
            - 'traefik.frontend.headers.STSIncludeSubdomains=true'
            - 'traefik.frontend.headers.STSPreload=true'




    #--------------------------------------------#
   ## SPEEDTEST                                  ##
   ##  Speedtest-CLI and Post to InfluxDB        ##
    #--------------------------------------------#
    speedtest:
        image: phikai/speedtest:${DEFAULT_TAG}
        container_name: speedtest
        restart: unless-stopped
        networks:
            - internal
        environment:
            - TZ=${TZ}
            - PUID=${PUID}
            - PGID=${PGID}
            - TEST_INTERVAL=${SPEEDTEST_INTERVAL}
        depends_on:
            - influxdb
        labels:
            - 'traefik.enable=false'




    #--------------------------------------------#
   ## VARKEN                                     ##
   ##  Standalone Plex Data Aggeregator          ##
    #--------------------------------------------#
    varken:
        image: boerderij/varken:${DEFAULT_TAG}
        container_name: varken
        restart: unless-stopped
        networks:
            - internal
        environment:
            - TZ=${TZ}
            - PUID=${PUID}
            - PGID=${PGID}
        volumes:
            - '/${ROOT_FOLDER_PATH}/containers/apps/system/varken:/config'
            - '/etc/localtime:/etc/localtime:ro'
        depends_on:
            - influxdb
        labels:
            - 'traefik.enable=false'




    #--------------------------------------------#
   ## GRAFANA                                    ##
   ##  Frontend for Varken                       ##
    #--------------------------------------------#
    grafana:
        image: grafana/grafana:${DEFAULT_TAG}
        container_name: grafana
        restart: unless-stopped
        networks:
            - web
            - internal
        expose:
            - 3000
        user: "0"
        environment:
            - TZ=${TZ}
            - PUID=${PUID}
            - PGID=${PGID}
            - GF_SERVER_DOMAIN=grafana.${DOMAIN}
            - GF_SERVER_ROOT_URL=https://grafana.${DOMAIN}
            - GF_PATHS_DATA=/config/data
            - GF_PATHS_LOGS=/config/logs
            - GF_PATHS_PLUGINS=/config/plugins
            - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
            - GF_SMTP_ENABLED=true
            - GF_SMTP_HOST=${SMTP_SERVER}:${SMTP_PORT}
            - GF_SMTP_USER=${SMTP_USER}
            - GF_SMTP_PASSWORD=${SMTP_PASS}
            - GF_SMTP_FROM_ADDRESS=${SMTP_FROM}
        volumes:
            - '/${ROOT_FOLDER_PATH}/containers/apps/system/grafana:/config'
        depends_on:
            - influxdb
        labels:
            - 'traefik.enable=true'
            - 'traefik.docker.network=${STACK_NAME}_web'
            - 'traefik.port=3000'
            - 'traefik.frontend.rule=Host:grafana.${DOMAIN}'
            - 'traefik.frontend.entryPoints=https'
            - 'traefik.frontend.headers.forceSTSHeader=true'
            - 'traefik.frontend.headers.STSSeconds=315360000'
            - 'traefik.frontend.headers.STSIncludeSubdomains=true'
            - 'traefik.frontend.headers.STSPreload=true'




    #--------------------------------------------#
   ## TRAEFIK                                    ##
   ##  Reverse Proxy + SSL Support               ##
    #--------------------------------------------#
    traefik:
        image: traefik:${TRAEFIX_TAG}
        container_name: traefik
        restart: unless-stopped
        networks:
            - web
        ports:
            - '80:80'
            - '443:443'
            - '8080:8080'
        environment:
            - TZ=${TZ}
            - PUID=${PUID}
            - PGID=${PGID}
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock'
            - '/${ROOT_FOLDER_PATH}/containers/apps/system/traefik:/etc/traefik/acme'
        command:
            - --docker
            - --api
            - --loglevel=debug
            - "--entryPoints=Name:https Address::443 TLS"
            - "--entryPoints=Name:http Address::80 Redirect.EntryPoint:https"
            - --acme.entrypoint=https 
            - --acme=true 
            - --acme.domains=${DOMAIN}
            - --acme.email=${EMAIL}
            - --acme.ondemand=true 
            - --acme.onhostrule
            - --acme.httpchallenge
            - --acme.httpchallenge.entrypoint=http
            - --acme.storage=etc/traefik/acme/acme.json
            - --docker.watch
        labels:
            - 'traefik.enable=true'
            - 'traefik.docker.network=${STACK_NAME}_web'
            - 'traefik.port=8080'
            - 'traefik.frontend.rule=Host:traefik.${DOMAIN}'
            - 'traefik.frontend.entryPoints=https'
            - 'traefik.frontend.auth.basic=${TRAEFIK_AUTH}'
            - 'traefik.frontend.headers.forceSTSHeader=true'
            - 'traefik.frontend.headers.STSSeconds=315360000'
            - 'traefik.frontend.headers.STSIncludeSubdomains=true'
            - 'traefik.frontend.headers.STSPreload=true'




    #--------------------------------------------#
   ## DENYHOSTS                                  ##
  ###  Protecting your server against repeated   ###
   ##         break-in attempts over SSH         ##
    #--------------------------------------------#
    denyhosts:
        image: adriel/denyhosts:latest
        container_name: denyhosts
        restart: unless-stopped
        networks:
            - web
        ports:
            - '80:80/tcp'
            - '443:443/tcp'
            - '8080:8080/tcp'
        expose:
            - 8080
        environment:
            - TZ=${TZ}
            - PUID=${PUID}
            - PGID=${PGID}
        volumes:
            - '/var/log/secure:/var/log/secure:ro'
            - '/etc/hosts.deny:/etc/hosts.deny'
            - '/${ROOT_FOLDER_PATH}/containers/apps/system/denyhosts/denyhosts.conf:/etc/denyhosts.conf:ro'
        command:
            - --docker
            - --api
            - --loglevel=debug
            - "--entryPoints=Name:https Address::443 TLS"
            - "--entryPoints=Name:http Address::80 Redirect.EntryPoint:https"
            - --acme.entrypoint=https
            - --acme=true
            - --acme.domains=192.168.0.47
            - --acme.email=${EMAIL}
            - --acme.ondemand=true
            - --acme.onhostrule
            - --acme.httpchallenge
            - --acme.httpchallenge.entrypoint=http
            - --acme.storage=etc/traefik/acme/acme.json
            - --docker.watch
        labels:
            - 'traefik.enable=true'
            - 'traefik.docker.network=${STACK_NAME}_web'
            - 'traefik.port=8080'
            - 'traefik.frontend.rule=Host:denyhosts.${DOMAIN}'
            - 'traefik.frontend.entryPoints=https'
            - 'traefik.frontend.auth.basic=${TRAEFIK_AUTH}'
            - 'traefik.frontend.headers.forceSTSHeader=true'
            - 'traefik.frontend.headers.STSSeconds=315360000'
            - 'traefik.frontend.headers.STSIncludeSubdomains=true'
            - 'traefik.frontend.headers.STSPreload=true'




    #--------------------------------------------#
   ## UniFi Docker Container                     ##
   ##  Ubiquiti Networks UniFi Controller        ##
    #--------------------------------------------#

      #----------------------------------------#
     #   Mongo DB (Dependency)                  #
      #----------------------------------------#
    mongo:
        image: mongo
        container_name: unifi-database
        restart: unless-stopped
        hostname: unifi-database
        ##   By default docker-compose will create a new bridge network for the services in the compose file.
        ##   Enable this to have the services/containers use the existing docker0/default bridge network.
        ##    # network_mode: bridge
        volumes:
            - '/${ROOT_FOLDER_PATH}/containers/apps/system/unifi/depend/mongodb/data/db:/data/db'

      #----------------------------------------#
     #   UniFi App                              #
      #----------------------------------------#
    unifi:
        image: jacobalberty/unifi
        container_name: unifi
        restart: unless-stopped
        hostname: unifi
        ##   By default docker-compose will create a new bridge network for the services in the compose file.
        ##   Enable this to have the services/containers use the existing docker0/default bridge network.
        ##    # network_mode: bridge
        links:
            - mongo
        ports:
            - 3478:3478/udp
            - 8080:8080
            - 8443:8443
            - 8880:8880
            - 8843:8843
        ##     Optional: Uncomment to enable speed tests from the UniFi iOS & Android apps
        ##      - 6789:6789
        ##     Optional: Uncomment for layer 2 broadcast discovery if container running on a host in the local LAN
        ##      - 10001:10001/udp
        volumes:
            - '/${ROOT_FOLDER_PATH}/containers/apps/system/unifi/cert:/usr/lib/unifi/cert'
            - '/${ROOT_FOLDER_PATH}/containers/apps/system/unifi/data:/usr/lib/unifi/data'
            - '/${ROOT_FOLDER_PATH}/containers/apps/system/unifi/logs:/usr/lib/unifi/logs'
            - '/etc/localtime:/etc/localtime:ro'
        environment:
            - DB_MONGO_LOCAL=false
            - DB_MONGO_URI=mongodb://mongo:27017/unifi
            - STATDB_MONGO_URI=mongodb://mongo:27017/unifi_stat
            - TZ=UTC
            - UNIFI_DB_NAME=unifi




########################
# GLOBAL CONFIGURATION #
########################

networks:
    internal:
    web:
