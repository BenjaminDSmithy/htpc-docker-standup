##
## -------------------------
## | H T P C - D O C K E R |
## -------------------------
##
## Container based media tools configuration
##
## -- DO NOT EDIT THIS FILE --
##
## Configuration items for this file are taken from the .env file
##
## Have docker-compose.yml and .env in the same directory to launch the stack

version: '2'

######################
# SERVICES TO LAUNCH #
######################

services:

    # ----------------------------------------
    # SONARR
    # TV Series Management
    # ----------------------------------------
    sonarr:
        image: lsioarmhf/sonarr
        container_name: sonarr
        restart: unless-stopped
        network_mode: 'bridge'
        ports:
            - '${IP_ADDRESS}:8989:8989'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - VIRTUAL_HOST=sonarr.${DOMAIN}
            - LETSENCRYPT_HOST=sonarr.${DOMAIN}
            - LETSENCRYPT_EMAIL=${EMAIL}
        volumes:
            - './sonarr:/config'
            - '/media/Media/Torrents/Completed:/data/Completed'
            - '/media/Media/Media/TVShows:/tv'
            - '/media/Media/Media/Kid TV:/kidtv'
            - '/etc/localtime:/etc/localtime:ro'

    # ----------------------------------------
    # RADARR
    # Movie Management
    # ----------------------------------------
    radarr:
        image: lsioarmhf/radarr
        container_name: radarr
        restart: unless-stopped
        network_mode: "bridge"
        ports:
            - '${IP_ADDRESS}:7878:7878'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - VIRTUAL_HOST=radarr.${DOMAIN}
            - LETSENCRYPT_HOST=radarr.${DOMAIN}
            - LETSENCRYPT_EMAIL=${EMAIL}
        volumes:
            - './radarr:/config'
            - '/media/Media/Torrents/Completed:/downloads'
            - '/media/Media/Media/Movies:/movies'
            - '/media/Media/Media/Kid Movies:/kidmovies'
            - '/etc/localtime:/etc/localtime:ro'

    # ----------------------------------------
    # TAUTULLI
    # Monitoring Service for PLEX Usage
    # ----------------------------------------
    plexpy:
        image: lsioarmhf/tautulli
        container_name: plexpy
        restart: unless-stopped
        network_mode: 'bridge'
        ports:
            - '${IP_ADDRESS}:8181:8181'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - VIRTUAL_HOST=plexpy.${DOMAIN}
            - LETSENCRYPT_HOST=plexpy.${DOMAIN}
            - LETSENCRYPT_EMAIL=${EMAIL}
        volumes:
            - './plexpy:/config'
            - './plex/Library/Application Support/Plex Media Server/Logs:/logs:ro'
            - '/etc/localtime:/etc/localtime:ro'
        depends_on:
            - plex

    # ----------------------------------------
    # OMBI
    # Request Service for Plex Content
    # ----------------------------------------
    ombi:
        image: lsioarmhf/ombi
        container_name: ombi
        restart: unless-stopped
        network_mode: 'bridge'
        ports:
            - '${IP_ADDRESS}:3579:3579'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - VIRTUAL_HOST=request.${DOMAIN}
            - LETSENCRYPT_HOST=request.${DOMAIN}
            - LETSENCRYPT_EMAIL=${EMAIL}
        volumes:
            - './ombi:/config'
            - '/etc/localtime:/etc/localtime:ro'

    # ----------------------------------------
    # PORTAINER
    # Docker Container Management
    # ----------------------------------------
    portainer:
        image: portainer/portainer:arm
        container_name: portainer
        restart: unless-stopped
        network_mode: 'bridge'
        ports:
            - '${IP_ADDRESS}:9000:9000'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - VIRTUAL_HOST=portainer.${DOMAIN}
            - LETSENCRYPT_HOST=portainer.${DOMAIN}
            - LETSENCRYPT_EMAIL=${EMAIL}
        volumes:
            - './portainer:/data'
            - '/var/run/docker.sock:/var/run/docker.sock'
            - '/etc/localtime:/etc/localtime:ro'
        command: --admin-password "$$2y$$05$$/w17ylCmg3CeLQvDjr5v9.dnUB5pWLrW6U9GuKsbjjb8LKdIA7zT6"

    # ----------------------------------------
    # WATCHTOWER
    # Automatic Update Service for Docker VMs
    # ----------------------------------------
    watchtower:
        image: v2tec/watchtower:armhf-latest
        container_name: watchtower
        restart: unless-stopped
        environment:
            - TZ=${TZ}
            - WATCHTOWER_NOTIFICATIONS=email
            - WATCHTOWER_NOTIFICATION_EMAIL_FROM=${SMTP_FROM}
            - WATCHTOWER_NOTIFICATION_EMAIL_TO=${WATCHTOWER_EMAIL}
            - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=${SMTP_SERVER}
            - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=${SMTP_PORT}
            - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=${SMTP_USER}
            - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=${SMTP_PASS}
        network_mode: 'bridge'
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock'
            - '/etc/ssl/certs:/etc/ssl/certs'
        command: portainer --schedule @midnight --cleanup

    # ----------------------------------------
    # NETDATA
    # System Resource Monitoring Service
    # ----------------------------------------
    netdata:
        image: titpetric/netdata
        container_name: netdata
        restart: unless-stopped
        network_mode: 'bridge'
        ports:
            - '${IP_ADDRESS}:19999:19999'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - VIRTUAL_HOST=netdata.${DOMAIN}
            - LETSENCRYPT_HOST=netdata.${DOMAIN}
            - LETSENCRYPT_EMAIL=${EMAIL}
        cap_add:
            - SYS_PTRACE
        volumes:
            - '/proc:/host/proc:ro'
            - '/sys:/host/sys:ro'
            - '/etc/localtime:/etc/localtime:ro'
            - '/var/run/docker.sock:/var/run/docker.sock'

    # ----------------------------------------
    # MUXIMUX
    # Web Frontend for HTPC Management
    # ----------------------------------------
    muximux:
        image: lsioarmhf/muximux
        container_name: muximux
        restart: unless-stopped
        network_mode: 'bridge'
        ports:
            - '${IP_ADDRESS}:8080:80'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - VIRTUAL_HOST=manage.${DOMAIN}
            - LETSENCRYPT_HOST=manage.${DOMAIN}
            - LETSENCRYPT_EMAIL=${EMAIL}
        volumes:
            - './muximux:/config'
            - '/etc/localtime:/etc/localtime:ro'

    # ----------------------------------------
    # DUPLICATI
    # Backup Software
    # ----------------------------------------
    duplicati:
        image: lsioarmhf/duplicati
        container_name: duplicati
        restart: unless-stopped
        network_mode: 'bridge'
        ports:
            - '${IP_ADDRESS}:8200:8200'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - VIRTUAL_HOST=duplicati.${DOMAIN}
            - LETSENCRYPT_HOST=duplicati.${DOMAIN}
            - LETSENCRYPT_EMAIL=${EMAIL}
        volumes:
            - './duplicati:/config'
            - '/media/Media/Media:/media'
            - '/etc/localtime:/etc/localtime:ro'

    # ----------------------------------------
    # NGINX-PROXY
    # Pretty Hostname Support for Services
    # ----------------------------------------
    nginx-proxy:
        image: jwilder/nginx-proxy:alpine
        container_name: nginx-proxy
        restart: unless-stopped
        network_mode: 'bridge'
        ports:
            - '80:80'
            - '443:443'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
        volumes:
            - './nginx-proxy/etc/nginx/vhost.d:/etc/nginx/vhost.d'
            - './nginx-proxy/usr/share/nginx/html:/usr/share/nginx/html'
            - './letsencrypt/certs:/etc/nginx/certs:ro'
            - '/etc/localtime:/etc/localtime:ro'
            - '/var/run/docker.sock:/tmp/docker.sock:ro'

    # ----------------------------------------
    # LETS ENCRYPT
    # SSL Support Companion for nginx-proxy
    # ----------------------------------------
    letsencrypt-nginx-proxy-companion:
        image: jrcs/letsencrypt-nginx-proxy-companion
        container_name: letsencrypt
        restart: unless-stopped
        network_mode: 'bridge'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
        volumes:
            - './letsencrypt/certs:/etc/nginx/certs:rw'
            - '/etc/localtime:/etc/localtime:ro'
            - '/var/run/docker.sock:/var/run/docker.sock:ro'
        volumes_from:
            - 'nginx-proxy'
